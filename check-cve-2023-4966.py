# Copyright (c) 2023 Jan Mu√ümann / UPONU GmbH

import gzip
import glob
import re
import argparse
import os.path


def main():

    # parse arguments

    parser = argparse.ArgumentParser(
        prog='check-cve-2023-4966.py',
        description='Python script to check CitrixNetScaler logs for possible CVE-2023-4966 exploitation'
    )

    parser.add_argument('logdir_path', help='path to NetScaler log files (located on the NetScaler in the dirctory /mnt/temp/log/)')
    parser.add_argument('--nologline', help='do not print the logline', action='store_true')

    args = parser.parse_args()

    ## run for all Logfiles
    paths = glob.glob(os.path.join(args.logdir_path,'ns.*.gz'))

    ## run script

    possible_exploitations = []

    for path in paths:
        with gzip.open(path, 'r') as fd:
            possible_exploitations += analyze_file(fd, path)

    with open(os.path.join(args.logdir_path,'ns.log'), 'r') as fd:
         possible_exploitations += analyze_file(fd, os.path.join(args.logdir_path,'ns.log'))

    for possible_exploitation in possible_exploitations:
        possible_exploitation.print(args.nologline)
    


class PossibleExploitation():

    def __init__(self, client_ip, source_ip, user, session_id, logline, logpath):
        
        self.client_ip = client_ip
        self.source_ip = source_ip
        self.user = user
        self.session_id = session_id
        self.logline = logline
        self.logpath = logpath

    def __str__(self):

        return "Logpath {} User: {} Client_ip: {} Source_ip {} Session_id: {} Logline: {}".format(self.logpath, self.user, self.client_ip, self.source_ip, self.session_id, self.logline)
    
    def print(self, nologline):
        if nologline:
            print("Logpath {} User: {} Client_ip: {} Source_ip {} Session_id: {}".format(self.logpath, self.user, self.client_ip, self.source_ip, self.session_id))
        else:
            print(str(self))

        
        


def analyze_file(fd, path=""):

    regex = re.compile(r"SessionId: (?P<session_id>.*) - User (?P<user>.*) - Client_ip (?P<client_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}).*Source (?P<source_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})")

    possible_exploitations = []

    for line in fd.readlines():

        if type(line) is bytes:
            match = regex.search(line.decode())
        elif type(line) is str:
            match = regex.search(line)

        if match is not None:
            if match.group('client_ip') != match.group('source_ip'):
                if type(line) is bytes:
                    line = line.decode()
                possible_exploitation = PossibleExploitation(
                    match.group('client_ip'),
                    match.group('source_ip'),
                    match.group('user'),
                    match.group('session_id'),
                    line,
                    path
                )
                possible_exploitations.append(possible_exploitation)
    return possible_exploitations


        


if __name__ == '__main__':
    main()
